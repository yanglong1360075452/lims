<beans:beans xmlns="http://www.springframework.org/schema/security"
             xmlns:beans="http://www.springframework.org/schema/beans"
             xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
             xsi:schemaLocation="http://www.springframework.org/schema/beans
           http://www.springframework.org/schema/beans/spring-beans-4.3.xsd
           http://www.springframework.org/schema/security
           http://www.springframework.org/schema/security/spring-security-4.1.xsd">


    <global-method-security pre-post-annotations="enabled" />

    <!-- 不用权限管理的资源路径 -->
    <http pattern="/index.html" security="none"/>
    <http pattern="/#/login" security="none"/>

    <http use-expressions="true" entry-point-ref="authenticationProcessingFilterEntryPoint" auto-config="false">

        <access-denied-handler ref="myAccessDeniedHandler"/>

        <!--
        logout-url 属性:这个指定的URL会触发注销操作，默认是 /j_spring_security_logout
        invalidate-session 属性：如果为true，在注销的时候,会销毁会话
        delete-cookies 属性：以逗号分隔的cookies名称，在用户注销时删除指定的cookies
        -->
        <!--<logout logout-success-url="/login" invalidate-session="true"-->
        <!--logout-url="/logout" delete-cookies="JSESSIONID"/>-->

        <custom-filter ref="myLogoutFilter" position="LOGOUT_FILTER" />

        <!--
        session超时跳转页面 以及每用户可拥有的session最大个数
        如果每次退出后，必须要求用户一定要重开浏览器才能登录，可以将 invalid-session-url="/logout.jsp"，以防止有些 Web 应用把用户的会话标识符，直接以 URL 的参数形式来传递
        -->
        <session-management session-authentication-strategy-ref="sessionAuthenticationStrategy"
                            invalid-session-url="/#/login">
        </session-management>

        <custom-filter position="CONCURRENT_SESSION_FILTER" ref="concurrencyFilter" />

        <!-- 使用验证码过滤器 -->
        <!-- <form-login /> -->
        <!-- 或 -->
        <!--<custom-filter ref="loginFilter" before="FORM_LOGIN_FILTER" />-->
        <custom-filter ref="ajaxLoginFilter" position="FORM_LOGIN_FILTER" />

        <!-- 实现免登陆验证
            key 为remember mecookie定义一个唯一的key值，以与我们的应用关联
            token-validity-seconds 定义时间的长度（以秒计） -->
        <remember-me key="CCDC-REMEMBER-ME" token-validity-seconds="1209600" />

        <custom-filter ref="basicAuthenticationFilter" position="BASIC_AUTH_FILTER"/>
        <!-- 使用自定义的过滤器 -->
        <custom-filter ref="myFilterSecurityInterceptor" before="FILTER_SECURITY_INTERCEPTOR"/>

        <intercept-url pattern="/api/auth/captcha" access="permitAll" />
        <!--<intercept-url pattern="/api/user/**" access="hasAuthority('0')" />-->
        <!--<intercept-url pattern="/api/project/**" access="hasAuthority('1')" />-->
        <intercept-url pattern="/api/**" access="isAuthenticated()"/>
        <csrf disabled="true"></csrf>
    </http>

    <!-- 配置登录入口点 -->
    <beans:bean id="authenticationProcessingFilterEntryPoint" class="com.wizinno.lims.security.MyLoginUrlAuthenticationEntryPoint">
        <beans:property name="loginFormUrl" value="/index.html"/>
        <!-- 是否强制HTTPS -->
        <beans:property name="forceHttps" value="true" />
        <beans:property name="useForward" value="true" />
    </beans:bean>

    <beans:bean id="basicAuthenticationFilter" class="org.springframework.security.web.authentication.www.BasicAuthenticationFilter">
        <beans:constructor-arg index="0" ref="myAuthenticationManager"/>
        <beans:constructor-arg index="1" ref="authenticationProcessingFilterEntryPoint"/>
    </beans:bean>

    <beans:bean id="sessionAuthenticationStrategy" class="org.springframework.security.web.authentication.session.ConcurrentSessionControlAuthenticationStrategy">
        <beans:constructor-arg name="sessionRegistry" ref="sessionRegistry" />
        <beans:property name="maximumSessions" value="1000" />
        <beans:property name="exceptionIfMaximumExceeded" value="true" />
    </beans:bean>

    <beans:bean id="sessionRegistry" class="org.springframework.security.core.session.SessionRegistryImpl"/>

    <!-- 实现了 UserDetailsService 接口的类 -->
    <authentication-manager alias="myAuthenticationManager">
        <authentication-provider ref="authenticationProvider" />
    </authentication-manager>

    <beans:bean id="authenticationProvider" class="org.springframework.security.authentication.dao.DaoAuthenticationProvider">
        <beans:property name="hideUserNotFoundExceptions" value="false" />
        <beans:property name="userDetailsService" ref="myUserDetailsService" />
        <!--<beans:property name="userCache" ref="userCache" />-->
        <!--<beans:property name="messageSource" ref="messageSource" />-->
        <beans:property name="passwordEncoder" ref="passwordEncoder" />
        <!--<beans:property name="saltSource" ref="saltSource" />-->
    </beans:bean>

    <!-- 用户的密码加密方式 -->
    <beans:bean id="passwordEncoder" class="org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder"/>
    <!--<beans:bean id="passwordEncoder" class="org.springframework.security.authentication.encoding.Md5PasswordEncoder"/>-->

    <beans:bean id="saltSource" class="org.springframework.security.authentication.dao.ReflectionSaltSource">
        <beans:property name="userPropertyToUse" value="username"/>
    </beans:bean>

    <beans:bean id="myUserDetailsService" class="com.wizinno.lims.security.SecurityUserDetailsService">
    </beans:bean>

    <beans:bean id="myAccessDecisionManager"
                class="com.wizinno.lims.security.MyAccessDecisionManager" />

    <!-- sessionManagementFilter -->
    <beans:bean id="concurrencyFilter"
                class="org.springframework.security.web.session.ConcurrentSessionFilter">
        <beans:constructor-arg index="0" ref="sessionRegistry"/>
        <beans:constructor-arg index="1" value="/#/login"/>
    </beans:bean>

    <!-- 验证ajax请求-->
    <beans:bean id="ajaxLoginFilter" init-method="init"
                class="com.wizinno.lims.security.AjaxUsernamePasswordAuthenticationFilter">
        <beans:property name="authenticationManager" ref="myAuthenticationManager"/>
        <beans:property name="successHandler" ref="ajaxSuccessHandler"/>
        <beans:property name="failureHandler" ref="ajaxFailureHandler"/>
        <beans:property name="username" value="username" />
        <beans:property name="password" value="password" />
        <beans:property name="sessionAuthenticationStrategy" ref="sessionAuthenticationStrategy" />
        <!-- 记住密码设置 -->
        <beans:property name="rememberMeServices" ref="rememberMeServices" />
        <beans:property name="myRequestMatcher" ref="loginRequestMatcher" />
    </beans:bean>

    <beans:bean id="myLogoutFilter" class="com.wizinno.lims.security.MyLogoutFilter">
        <beans:property name="logoutRequestMatcher" ref="logoutRequestMatcher" />
        <!-- 退出处理成功后的默认显示url -->
        <beans:constructor-arg index="0" ref="logoutSuccessHandler" />
        <beans:constructor-arg index="1">
            <!-- 退出成功后的handler列表 -->
            <beans:array>
                <beans:bean id="securityContextLogoutHandler"
                            class="org.springframework.security.web.authentication.logout.SecurityContextLogoutHandler" />
                <!-- 加入了开发人员自定义的退出成功处理 -->
            </beans:array>
        </beans:constructor-arg>
    </beans:bean>

    <beans:bean id="logoutSuccessHandler"
                class="com.wizinno.lims.security.MyLogoutSuccessHandler">
        <beans:property name="defaultTargetUrl" value="/#/login" />
    </beans:bean>

    <beans:bean id="rememberMeServices"
                class="org.springframework.security.web.authentication.rememberme.TokenBasedRememberMeServices" >
        <beans:constructor-arg name="key" value="CCDC-REMEMBER-ME" />
        <!-- 默认时间604800秒(一个星期) -->
        <beans:property name="tokenValiditySeconds" value="604800" />
        <beans:property name="parameter" value="rememberMe" />
        <beans:constructor-arg name="userDetailsService" ref="myUserDetailsService" />
    </beans:bean>

    <beans:bean id="ajaxSuccessHandler"
                class="com.wizinno.lims.security.MyAjaxAuthenticationSuccessHandler"/>
    <beans:bean id="ajaxFailureHandler" class=
            "com.wizinno.lims.security.MyAjaxAuthenticationFailureHandler">
        <beans:property name="forwardToDestination" value="false" />
        <beans:property name="defaultFailureUrl" value="/#/login" />
    </beans:bean>

    <beans:bean id="myAccessDeniedHandler" class="com.wizinno.lims.security.MyAccessDeniedHandler">
        <beans:property name="errorPage" value="/error/403" />
    </beans:bean>

    <beans:bean id="myFilterSecurityInterceptor"
                class="com.wizinno.lims.security.MyFilterSecurityInterceptor" />
    <beans:bean id="myInvocationSecurityMetadataSource"
                class="com.wizinno.lims.security.MyInvocationSecurityMetadataSource" />

    <beans:bean id="loginRequestMatcher" class="com.wizinno.lims.security.MyRequestMatcher">
        <beans:property name="filterProcessesUrl" value="/api/login"/>
    </beans:bean>
    <beans:bean id="logoutRequestMatcher" class="com.wizinno.lims.security.MyRequestMatcher">
        <beans:property name="filterProcessesUrl" value="/api/logout"/>
    </beans:bean>
</beans:beans>